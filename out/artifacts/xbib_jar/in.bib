@misc{essay92294,
           title = {Replication and Analysis of the Berry-Sethi Parser for Ambiguous Regular Expressions},
            year = {2022},
          author = {Ivo {Broekhof}},
           month = {January},
        abstract = {Since regular languages, often described with Regular Expressions, are much faster to parse than context-free languages, it can prove beneficial to define regular (parts of) languages using Regular Expressions rather than the more powerful yet slower to parse Context-Free Grammars. However, ambiguity in regular expressions can make this task more difficult. We have successfully replicated a deterministic parser generator for Ambiguous Regular Expressions, based on the Berry-Sethi algorithm, in Kotlin.},
             url = {http://essay.utwente.nl/92294/}
}
@misc{essay91890,
            year = {2022},
           title = {Using d-NFGs to identify and eliminate dead code in C programs},
           month = {July},
          author = {Cato de {Kruif}},
        abstract = {Dead code is any code in a computer program which does not affect the application. It is prevalent in computer programs, can be harmful and pose significant risks. This research aims to detect and eliminate dead code. To do this, we used a newly introduced data structure, called d-NFG, derived from the Program Dependency Graph (PDG). To fulfil our objective, we created a d-NFG for each commit of a code repository and then identified two types of dead code: unreachable code and unused variables. This was done by using an altered Breadth-First Search (BFS) and by analyzing the graph?s data and name flow.We have found that d-NFGs are useful in the detection of revived code and can be helpful in future projects. For standard dead code detection,a simple PDG is sufficient.},
             url = {http://essay.utwente.nl/91890/}
}
@misc{essay91735,
            year = {2022},
           title = {Weighted Abstract Syntax Trees for Program Comprehension in Java},
           month = {July},
          author = {Izzet Berke {Guducu}},
        abstract = {In this paper, we examine the generation and applications of Weighted Abstract Syntax Trees (WAST) for Java based on usage statistics.We discuss several use cases for WASTs, and look into how they can aid in program comprehension. Program comprehension is the activity that developers take part in to understand the source code of a software system. A Weighted Abstract Syntax Tree's potential uses in program comprehension is showcased and an algorithm for generating them is described. The algorithm's results are demonstrated with open-source Java projects.  We suggest that the algorithm can be used to analyse the characteristics of Java projects, which would aid in program comprehension.},
             url = {http://essay.utwente.nl/91735/}
}
