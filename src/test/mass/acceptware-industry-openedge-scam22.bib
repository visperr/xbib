@online{ProgressHandle,
  key =          {Progress Software Corporation},
  year =         2021,
  title =        "Handle Reference",
  url =          "https://docs.progress.com/bundle/openedge-abl-reference-117/page/Handle-Reference.html",
}
@online{WhatIsOpenEdge,
  key =          {Progress Software Corporation},
  year  =        2017,
  title =        "What is OpenEdge",
  url =          "https://docs.progress.com/bundle/openedge-guide-for-new-developers-117/page/What-is-OpenEdge.html",
}

@misc{ProgressDeveloperStudio,
  author =       "{Progress Software Corporation}",
  title =        "{Introduction to Progress Developer Studio for OpenEdge}",
  howpublished = "\url{https://www.progress.com/services/education/openedge/introduction-to-progress-developer-studio-for-openedge}",
}

@online{Eclipse,
  year =        "n.d.",
  key =         {Eclipse Foundation},
  title =       "Eclipse IDE",
  url =         "https://eclipseide.org/release/",
}

@online{ProgressInvokingSyntaxCompletion,
  year =         "2017",
  key =          {Progress Software Corporation},
  title =        "Invoking syntax-completion assistance",
  url =          "https://docs.progress.com/bundle/openedge-developer-studio-olh-117/page/Invoking-syntax-completion-assistance.html",
}

@misc{Javadoc,
  author =         {Oracle},
  title =       "{How to Write Doc Comments for the Javadoc Tool}",
  howpublished = "\url{https://www.oracle.com/technical-resources/articles/java/javadoc-tool.html}",
}

@misc{VSCodePlugin,
  year         = 2020,
  title        = "{OpenEdge ABL}",
  author       = "Camicas Christophe",
  howpublished = "{VS Marketplace}, \url{https://marketplace.visualstudio.com/items?itemName=chriscamicas.openedge-abl}",
}

@online{Proparse,
  author =      {Mike Fechner and Sebastian Wandel and Marian Edu},
  year =        "2014--2021",
  title =       "Proparse",
  url =         "https://github.com/consultingwerk/proparse",
}

@misc{OEHive,
  year =        2007,
  author =      "John Green",
  title =       "Proparse Book",
  howpublished = "\url{http://www.oehive.org/proparse/}",
}

@misc{IntelliJ-IDEA,
  year =        2001,
  author =      "{JetBrains}",
  title =       "{IntelliJ IDEA: Capable and Ergonomic IDE for JVM}",
  howpublished ="JetBrains, \url{https://www.jetbrains.com/idea/}",
}

@misc{VisualStudio,
  year =        1997,
  key =         "{Microsoft}",
  title =       "{Visual Studio: IDE and Code Editor for Software Developers and Teams}",
  howpublished = "\url{https://visualstudio.microsoft.com/}",
}

@misc{PlatformSDK,
  author =         "{JetBrains}",
  title =       "{IntelliJ Platform SDK}",
  howpublished = "\url{https://plugins.jetbrains.com/docs/intellij/welcome.html}",
  year =        2022,
}

@misc{PlatformSDKPSI,
  author =         "JetBrains",
  title =       "{IntelliJ Platform SDK: What is the PSI?}",
  howpublished = "\url{https://plugins.jetbrains.com/docs/intellij/psi.html}",
  year =        2022,
}

@misc{Prolint,
  year =        2001,
  author  =      "Jurjen Dijkstra",
  title =       "{What is Prolint}",
  url =         "https://web.archive.org/web/20011109094234/http://www.global-shared.com/prolint/prolint.htm",
  howpublished = "WebArchive",
}

@misc{ProgressHistory,
  author =      "{Finland Progress User Group}",
  title =       "{A History of Progress}",
  howpublished = "\url{https://www.finpug.fi/historiaa/a-history-of-progress/}",
  year =        2020,
}

@online{JFlex,
  key =         "JFlex",
  title =       "JFlex - The Fast Scanner Generator for Java",
  url =         "https://www.jflex.de/",
}

@online{GrammarKit,
  author =      {JetBrains},
  year =        "2014--2021",
  key =         "JetBrains",
  title =       "Grammar-Kit",
  url =         "https://github.com/JetBrains/Grammar-Kit",
}

@online{ANTLR4IntellijAdaptor,
  author =      {Terence Parr and Bastien Jansen and Danny van Bruggen and Yegor Petrov and Alex Katlein },
  year =        "2015--2021",
  key =         "ANTLR",
  title =       "{ANTLRv4 support in IntelliJ IDEs}",
  url =         "https://github.com/antlr/antlr4-intellij-adaptor",
}

@misc{SonarQubeOpenEdge,
  author =      "Gilles Querret",
  year =        "2016--2022",
  title =       "{CABL --- Code Analyzer for ABL}",
  howpublished ="Riverside Software, \url{https://github.com/Riverside-Software/sonar-openedge}",
}

@online{ADE-sourcecode,
  author =      "Mike Fechner",
  year =        "2016--2022",
  key =         "Consultingwerk",
  title =       "ADE Sourcecode",
  url =         "https://github.com/consultingwerk/ADE-Sourcecode",
}

@ARTICLE{herlihy:methodology,
    author = {Herlihy, Maurice},
    title = {A Methodology for Implementing Highly Concurrent Data Objects},
    journal = {ACM Trans. Program. Lang. Syst.},
    volume = {15},
    number = {5},
    pages = {745-770},
    month = {November},
    year = {1993},
    doi = {10.1145/161468.161469},
}

@InProceedings{10.1007/978-3-030-21902-4_7,
author="Morales, Jenny
and Botella, Federico
and Rusu, Cristian
and Qui{\~{n}}ones, Daniela",
editor="Meiselwitz, Gabriele",
title="How ``Friendly'' Integrated Development Environments Are?",
booktitle="Social Computing and Social Media. Design, Human Behavior and Analytics",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="80--91",
abstract="Programmers and software developers are using different Integrated Development Environments (IDEs) to perform their daily work. IDEs are often complex applications, not friendly for novice programmers, with a learning process of several weeks and with usability and satisfaction of use not always as good as expected. The Programmer eXperience (PX) is a particular case of User eXperience (UX), based on the use of the IDEs and other artifacts. We have found studies about the programmer's behavior and work, and also articles addressed the usability and new tools proposals for IDEs. In this work, we conducted a survey to evaluate the usability of several IDEs. The survey was based on the System Usability Scale (SUS), which we adapted for the purpose of our research. We focus the study on popular IDEs such as Dev-C++, Eclipse and NetBeans. The survey was conducted in two Chilean universities and one Spanish university, with students enrolled in two undergraduate programs in Informatics Engineering. The results obtained show that the IDEs evaluated have several issues related to the usability perceived by our participants. An interview was conducted with six experienced programmers that are working in different programming environments, in order to consult them on what aspects they would like to improve the IDEs. Their comments indicate that IDEs should incorporate connection with other programmers, and also, they claim for more intuitive interfaces and understandable error messages.",
isbn="978-3-030-21902-4"
}

 @article{beelders_du_plessis_2015,
  title = "{Syntax Highlighting as an Influencing Factor when Reading and Comprehending Source Code}",
  volume = {9},
  doi = {10.16910/jemr.9.1.1},
  number = {1},
  journal = {Journal of Eye Movement Research},
  author = {Beelders, Tanya R. and Du Plessis, Jean-Pierre L.},
  year = {2015}
} 

 @inproceedings{sarkar2015impact,
  title="{The Impact of Syntax Colouring on Program Comprehension}",
  author={Sarkar, Advait},
  booktitle={PPIG},
  pages={8},
  year={2015}
}

@inproceedings{10.1145/99412.99432,
author = {Cigas, John F.},
title = {Dynamically Displaying a Pascal Program in Color},
year = {1990},
isbn = {0897913477},
publisher = {ACM},
url = {https://doi.org/10.1145/99412.99432},
doi = {10.1145/99412.99432},
abstract = {This paper describes a method of using color to display the actual structure of a Pascal program on a color monitor. This enhancement not only increases a programmer's understanding of the code, but also aids in detecting common structural errors. The paper identifies several structures deserving of color and the properties that must be adhered to when assigning colors to these structures. A simple coloring scheme illustrates this discussion. The last section describes enhancements and directions for future research.},
booktitle = {Proceedings of the 1990 ACM SIGSMALL/PC Symposium on Small Systems},
pages = {68–71},
numpages = {4},
location = {Crystal City, Virginia, USA},
series = {SIGSMALL '90}
}

@techreport{Haregard1338841,
   author = {H{\"a}reg{\aa}rd, Erik and Kruger, Alexander},
   -institution = {KTH, School of Electrical Engineering and Computer Science (EECS)},
   institution = {KTH, EECS},
   title = "{Comparing Syntax Highlightings and Their Effects on Code Comprehension}",
   number = {TRITA-EECS-EX 2019:337},
   year = 2019,
}

@inproceedings{7476636,
  author={Amann, Sven and Proksch, Sebastian and Nadi, Sarah and Mezini, Mira},
  -booktitle={2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
  booktitle = "SANER",
  title="{A Study of Visual Studio Usage in Practice}",
  year={2016},
  volume={1},
  pages={124-134},
  doi={10.1109/SANER.2016.39},
}

@article{1657944,
  author = {Murphy, G.C. and Kersten, M. and Findlater, L.},
  journal = {IEEE Software},
  title = "{How are Java Software Developers Using the Eclipse IDE?}",
  year = {2006},
  volume = {23},
  number = {4},
  pages = {76-83},
  doi = {10.1109/MS.2006.105}
}

@inproceedings{10.1145/585058.585065,
author = {Forward, Andrew and Lethbridge, Timothy C.},
title = {The Relevance of Software Documentation, Tools and Technologies: A Survey},
year = {2002},
isbn = {1581135947},
publisher = {ACM},
doi = {10.1145/585058.585065},
-booktitle = {Proceedings of the 2002 ACM Symposium on Document Engineering},
booktitle = "DocEng",
pages = {26–33},
numpages = {8},
-series = {DocEng '02}
}

@inproceedings{10.1007/11836025_72,
author="Hyv{\"o}nen, Eero
and M{\"a}kel{\"a}, Eetu",
-editor="Mizoguchi, Riichiro and Shi, Zhongzhi and Giunchiglia, Fausto",
title="{Semantic Autocompletion}",
booktitle="ASWC",
year="2006",
publisher="Springer",
pages="739--751",
isbn="978-3-540-38331-4"
}

@inproceedings{10.1145/3437963.3441725,
author = {Kang, Young Mo and Liu, Wenhao and Zhou, Yingbo},
title = "{QueryBlazer: Efficient Query Autocompletion Framework}",
year = {2021},
isbn = {9781450382977},
publisher = {ACM},
url = {https://doi.org/10.1145/3437963.3441725},
doi = {10.1145/3437963.3441725},
-booktitle = {Proceedings of the 14th ACM International Conference on Web Search and Data Mining},
booktitle = "WSDM",
pages = {1020–1028},
numpages = {9},
-series = {WSDM '21}
}

@inproceedings{6976073,
  author={Asaduzzaman, Muhammad and Roy, Chanchal K. and Schneider, Kevin A. and Hou, Daqing},
  -booktitle={2014 IEEE International Conference on Software Maintenance and Evolution},
  booktitle = "ICSME",
  title="{CSCC: Simple, Efficient, Context Sensitive Code Completion}",
  year={2014},
  pages={71--80},
  doi={10.1109/ICSME.2014.29}
}

@misc{https://doi.org/10.48550/arxiv.2001.11334,
  doi = {10.48550/ARXIV.2001.11334},
  url = {https://arxiv.org/abs/2001.11334},
  author = {Patrignani, Marco},
  title = "{Why Should Anyone use Colours? or, Syntax Highlighting Beyond Code Snippets}",
  publisher = {arXiv},
  year = 2020,
}

@inproceedings{10.1145/1882362.1882374,
author = {Bruch, Marcel and Bodden, Eric and Monperrus, Martin and Mezini, Mira},
title = "{IDE 2.0: Collective Intelligence in Software Development}",
year = {2010},
isbn = {9781450304276},
publisher = {ACM},
doi = {10.1145/1882362.1882374},
-booktitle = {Proceedings of the FSE/SDP Workshop on Future of Software Engineering Research},
booktitle = "FoSER",
pages = {53–58},
numpages = {6},
-series = {FoSER '10}
}

@inbook{brookshear_brylow_2020, place={NY, NY}, title={6.1 Historical Perspective}, booktitle={Computer science: An overview}, publisher={Pearson}, author={Brookshear, J. Glenn and Brylow, Dennis}, year={2020}, pages={320–326}} 

@InProceedings{10.1007/978-3-642-41707-8_2,
author="Guo, Hai-Feng
and Qiu, Zongyan",
editor="Yenig{\"u}n, H{\"u}sn{\"u}
and Yilmaz, Cemal
and Ulrich, Andreas",
title="Automatic Grammar-Based Test Generation",
booktitle="Testing Software and Systems",
year="2013",
publisher="Springer",
pages="17--32",
isbn="978-3-642-41707-8"
}

@inproceedings{10.1145/1375581.1375607,
author = {Godefroid, Patrice and Kiezun, Adam and Levin, Michael Y.},
title = "{Grammar-Based Whitebox Fuzzing}",
year = {2008},
isbn = {9781595938602},
publisher = {ACM},
doi = {10.1145/1375581.1375607},
-booktitle = {Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation},
booktitle = "PLDI",
pages = {206–215},
numpages = {10},
}

@article{10.1145/1379022.1375607,
author = {Godefroid, Patrice and Kiezun, Adam and Levin, Michael Y.},
title = {Grammar-Based Whitebox Fuzzing},
year = {2008},
issue_date = {June 2008},
publisher = {ACM},
volume = {43},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/1379022.1375607},
doi = {10.1145/1379022.1375607},
abstract = {Whitebox fuzzing is a form of automatic dynamic test generation, based on symbolic execution and constraint solving, designed for security testing of large applications. Unfortunately, the current effectiveness of whitebox fuzzing is limited when testing applications with highly-structured inputs, such as compilers and interpreters. These applications process their inputs in stages, such as lexing, parsing and evaluation. Due to the enormous number of control paths in early processing stages, whitebox fuzzing rarely reaches parts of the application beyond those first stages.In this paper, we study how to enhance whitebox fuzzing of complex structured-input applications with a grammar-based specification of their valid inputs. We present a novel dynamic test generation algorithm where symbolic execution directly generates grammar-based constraints whose satisfiability is checked using a custom grammar-based constraint solver. We have implemented this algorithm and evaluated it on a large security-critical application, the JavaScript interpreter of Internet Explorer 7 (IE7). Results of our experiments show that grammar-based whitebox fuzzing explores deeper program paths and avoids dead-ends due to non-parsable inputs. Compared to regular whitebox fuzzing, grammar-based whitebox fuzzing increased coverage of the code generation module of the IE7 JavaScript interpreter from 53% to 81% while using three times fewer tests.},
journal = {SIGPLAN Not.},
month = {jun},
pages = {206–215},
numpages = {10},
keywords = {program verification, grammars, software testing, automatic test generation}
}